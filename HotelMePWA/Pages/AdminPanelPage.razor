@page "/admin/users"
@inject AuthService AuthService
@inject HttpClient Http

<MudText Typo="Typo.h5" Class="mb-4">👥 Users</MudText>

@if (!isReady)
{
    <MudProgressCircular Indeterminate="true" Size="Size.Large" />
}
else if (!isAdmin)
{
    <MudAlert Severity="Severity.Error">⛔ Must be an Administrator.</MudAlert>
}
else if (users.Count == 0)
{
    <MudText Color="Color.Secondary">No users found.</MudText>
}
else
{
    <MudTable Items="users" Striped="true" Hover="true">
        <HeaderContent>
            <MudTh>#</MudTh>
            <MudTh>Username</MudTh>
            <MudTh>Email</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="#">@context.Id</MudTd>
            <MudTd DataLabel="UserName">@context.UserName</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
        </RowTemplate>
    </MudTable>
    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               OnClick="LoadUsers"
               Class="mt-2">
        🔄 Reload
    </MudButton>
}

@code {
    private bool isReady;
    private bool isAdmin;
    private List<ApplicationUser> users = new();

    protected override async Task OnInitializedAsync()
    {
        var role = await AuthService.GetUserRole();
        isAdmin = role == "Admin";
        isReady = true;
        if (isAdmin)
            await LoadUsers();
    }

    private async Task LoadUsers()
    {
        var client = await AuthService.GetAuthorizedHttpClient();
        users = await client.GetFromJsonAsync<List<ApplicationUser>>("api/users/all-users")
               ?? new List<ApplicationUser>();
    }

    private class ApplicationUser
    {
        public string Id { get; set; }
        public string UserName { get; set; }
        public string Email { get; set; }
    }
}
