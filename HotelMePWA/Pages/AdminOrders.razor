@page "/admin/orders"
@using HotelMe.Shared.Models
@inject OrderService OrderService
@inject AuthService AuthService

<MudText Typo="Typo.h5" Class="mb-4">📦 All Orders (Admin)</MudText>

@if (!isReady)
{
    <MudProgressCircular Indeterminate="true" Size="Size.Large" />
}
else if (!isAdmin)
{
    <MudAlert Severity="Severity.Error">⛔ Достъп само за администратори.</MudAlert>
}
else if (orders.Count == 0)
{
    <MudText Color="Color.Secondary">Няма поръчки.</MudText>
}
else
{
    <MudTable Items="orders" Striped="true" Hover="true">
        <HeaderContent>
            <MudTh>#</MudTh>
            <MudTh>User ID</MudTh>
            <MudTh>Room</MudTh>
            <MudTh>Items</MudTh>
            <MudTh>Created</MudTh>
            <MudTh>Status</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="#">@context.Id</MudTd>
            <MudTd DataLabel="User ID">@context.UserId</MudTd>
            <MudTd DataLabel="Room">@((context.RoomNumber) ?? "—")</MudTd>
            <MudTd DataLabel="Items">@string.Join(", ", context.Items.Select(i => i.MenuItemName))</MudTd>
            <MudTd DataLabel="Created">@context.CreatedAt.ToLocalTime().ToString("g")</MudTd>
            <MudTd DataLabel="Status">@context.Status</MudTd>
            <MudTd DataLabel="">
                @if (context.Status == "Pending")
                {
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Small"
                               OnClick="@(() => Complete(context.Id))">
                        Complete
                    </MudButton>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private bool isAdmin, isReady;
    private List<Order> orders = new();

    protected override async Task OnInitializedAsync()
    {
        var role = await AuthService.GetUserRole();
        isAdmin = role == "Admin";

        if (isAdmin)
            orders = await OrderService.GetAllOrders();

        isReady = true;
    }

    private async Task Complete(int id)
    {
        if (await OrderService.CompleteOrder(id))
        {
            var ord = orders.First(o => o.Id == id);
            ord.Status = "Completed";
            StateHasChanged();
        }
    }
}
