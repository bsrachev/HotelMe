@page "/book-room"
@using HotelMe.Shared.Models
@inject BookingService BookingService
@inject AuthService AuthService
@inject NavigationManager Nav

<MudText Typo="Typo.h5" Class="mb-4">📅 Make a Booking</MudText>

@if (!isReady)
{
    <MudProgressCircular Indeterminate="true" Size="Size.Large" />
}
else if (!isAuthenticated)
{
    <MudAlert Severity="Severity.Error">
        ⛔ You must <MudLink Href="login">log in</MudLink> first.
    </MudAlert>
}
else if (existingBooking != null)
{
    <MudAlert Severity="Severity.Success">
        ✅ You already have a booking for room
        <strong>@existingBooking.RoomNumber</strong>
        from @existingBooking.CheckInDate:yyyy-MM-dd
        to @existingBooking.CheckOutDate:yyyy-MM-dd.
    </MudAlert>
    <MudButton Variant="Variant.Text" OnClick="GoCheckIn">
        Go to Check-in Page
    </MudButton>
}
else
{
    <MudPaper Class="pa-4">
        <EditForm Model="request" OnValidSubmit="SubmitBooking">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <MudTextField @bind-Value="request.RoomNumber"
                          Label="Room Number"
                          Required="true" />

            <MudDatePicker T="DateTime"
                           @bind-Value="request.CheckInDate"
                           Label="Check-in Date"
                           Required="true" />

            <MudDatePicker T="DateTime"
                           @bind-Value="request.CheckOutDate"
                           Label="Check-out Date"
                           Required="true" />

            <MudButton Type="Submit"
                       Variant="Variant.Filled"
                       Disabled="isSubmitting"
                       Class="mt-4">
                @(isSubmitting ? "⏳ Booking…" : "✅ Book Now")
            </MudButton>
        </EditForm>

        @if (!string.IsNullOrEmpty(feedback))
        {
            <MudText Class="mt-2">@feedback</MudText>
        }
    </MudPaper>
}

@code {
    private BookingRequest request = new()
        {
            CheckInDate = DateTime.Today,
            CheckOutDate = DateTime.Today.AddDays(1)
        };
    private bool isReady, isAuthenticated, isSubmitting;
    private string feedback = "";
    private Booking existingBooking;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticated();
        if (isAuthenticated)
            existingBooking = await BookingService.GetCurrentBooking();
        isReady = true;
    }

    private void GoCheckIn() => Nav.NavigateTo("/checkin");

    private async Task SubmitBooking()
    {
        isSubmitting = true;
        var ok = await BookingService.CreateBooking(request);
        isSubmitting = false;

        if (ok)
        {
            feedback = "🎉 Booking created! You can now check-in on arrival.";
            Nav.NavigateTo("/checkin");
        }
        else
        {
            feedback = "❌ Failed to create booking.";
        }
    }
}
