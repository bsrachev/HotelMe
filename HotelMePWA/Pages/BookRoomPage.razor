@page "/book-room"
@inject BookingService BookingService
@inject AuthService AuthService
@inject NavigationManager Nav

<MudText Typo="Typo.h5" Class="mb-2">📅 Make a Booking</MudText>

@if (!isReady)
{
    <MudProgressCircular Indeterminate="true" Class="my-4" />
}
else if (!isAuthenticated)
{
    <MudText Color="Color.Error">
        ⛔ You must <MudLink Href="/login">log in</MudLink> first.
    </MudText>
}
else if (existingBooking != null)
{
    <MudAlert Severity="Severity.Success" Variant="Variant.Filled">
        ✅ You already have a booking for room <strong>@existingBooking.RoomNumber</strong>
        from <strong>@existingBooking.CheckInDate.ToShortDateString()</strong>
        to <strong>@existingBooking.CheckOutDate.ToShortDateString()</strong>.
    </MudAlert>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mt-2" Href="/checkin">Go to Check-in Page</MudButton>
}
else
{
    <MudForm Model="request" @ref="form" OnValidSubmit="SubmitBooking">
        <MudTextField @bind-Value="request.RoomNumber" Label="Room Number" Class="mb-3" />
        <MudDatePicker @bind-Date="request.CheckInDate" Label="Check‑in Date" Class="mb-3" />
        <MudDatePicker @bind-Date="request.CheckOutDate" Label="Check‑out Date" Class="mb-3" />

        <MudButton Color="Color.Primary" Disabled="@isSubmitting" Type="Submit">
            @(isSubmitting ? (MarkupString)"⏳ Booking…" : (MarkupString)"✅ Book Now")
        </MudButton>

        @if (!string.IsNullOrEmpty(feedback))
        {
            <MudText Class="mt-2">@feedback</MudText>
        }
    </MudForm>
}

@code {
    private BookingRequest request = new()
        {
            CheckInDate = DateTime.Today,
            CheckOutDate = DateTime.Today.AddDays(1)
        };
    private bool isAuthenticated;
    private bool isReady;
    private bool isSubmitting;
    private MudForm? form;
    private string? feedback;
    private Booking? existingBooking;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticated();
        if (isAuthenticated)
        {
            existingBooking = await BookingService.GetCurrentBooking();
        }
        isReady = true;
    }

    private void GoLogin() => Nav.NavigateTo("/login");

    private async Task SubmitBooking()
    {
        isSubmitting = true;
        var ok = await BookingService.CreateBooking(request);
        isSubmitting = false;

        if (ok)
        {
            feedback = "🎉 Booking created! You can now check‑in on arrival.";
            existingBooking = new Booking
            {
                RoomNumber = request.RoomNumber,
                CheckInDate = request.CheckInDate,
                CheckOutDate = request.CheckOutDate,
                Status = "Pending"
            };
        }
        else
        {
            feedback = "❌ Failed to create booking.";
        }
    }
}
