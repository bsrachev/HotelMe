@page "/roomservice"
@using HotelMe.Shared.Models
@inject RoomService RoomService
@inject BookingService BookingService
@inject NavigationManager Nav

<MudText Typo="Typo.h5" Class="mb-2">🍽️ Room Service Menu</MudText>

@if (!isInit)
{
    <MudProgressCircular Indeterminate="true" Class="my-4" />
}
else if (booking == null || booking.Status != "CheckedIn")
{
    <MudText Color="Color.Error">⛔ You must have an active room (Checked-In) to order.</MudText>
}
else
{
    <MudText Typo="Typo.subtitle2"><em>Room: @booking.RoomNumber</em></MudText>
    <MudGrid Class="mt-2">
        @foreach (var item in menu)
        {
            <MudItem xs="12" md="4">
                <MudCard Class="mb-3">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">@item.Name</MudText>
                        <MudText>@item.Description</MudText>
                        <MudText><b>Price:</b> $@item.Price</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Color="Color.Primary" Size="Size.Small" OnClick="() => AddToCart(item)">🛒 Add to cart</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>

    @if (cart.Any())
    {
        <MudDivider Class="my-2" />
        <MudText Typo="Typo.h6">Your Cart (@cart.Count):</MudText>
        <MudList Dense="true" Class="mb-2">
            @foreach (var c in cart)
            {
                <MudListItem>
                    <MudText>@c.Name</MudText>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" Size="Size.Small" OnClick="() => RemoveFromCart(c)" />
                </MudListItem>
            }
        </MudList>

        <MudButton Color="Color.Success" Disabled="@isSubmitting" OnClick="SubmitOrder">
            @(isSubmitting ? "⏳ Submitting…" : "✅ Submit Order")
        </MudButton>

        @if (!string.IsNullOrEmpty(feedback))
        {
            <MudText Class="mt-2">@feedback</MudText>
        }
    }
}

@code {
    private Booking? booking;
    private List<MenuItem> menu = new();
    private List<MenuItem> cart = new();
    private bool isInit, isSubmitting;
    private string feedback = "";

    protected override async Task OnInitializedAsync()
    {
        // 1) load booking
        booking = await BookingService.GetCurrentBooking();
        // 2) load menu
        menu = await RoomService.GetMenu();
        isInit = true;
    }

    void AddToCart(MenuItem item) => cart.Add(item);
    void RemoveFromCart(MenuItem item) => cart.Remove(item);

    async Task SubmitOrder()
    {
        if (booking == null || booking.Status != "CheckedIn")
        {
            feedback = "⛔ You must be checked in to place an order.";
            return;
        }

        isSubmitting = true;
        feedback = "";

        var ok = await RoomService.PlaceOrder(cart.Select(x => x.Id));
        isSubmitting = false;

        if (ok)
        {
            // On success, navigate to /orders
            Nav.NavigateTo("/orders");
        }
        else
        {
            feedback = "❌ Failed to place order.";
        }
    }
}
