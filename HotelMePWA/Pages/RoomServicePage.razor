@page "/roomservice"
@using HotelMe.Shared.Models
@inject RoomService RoomService
@inject AuthService AuthService
@inject NavigationManager Nav

<h3>🍽️ Room Service Menu</h3>

@if (!isInitialized)
{
    <p>⏳ Loading…</p>
}
else
{
    <div class="row">
        @foreach (var item in menu)
        {
            <div class="col-md-4 mb-3">
                <div class="card p-3">
                    <h5>@item.Name</h5>
                    <p>@item.Description</p>
                    <p><strong>Price:</strong> $@item.Price</p>
                    <button class="btn btn-sm btn-primary"
                            @onclick="() => AddToCart(item)"
                            disabled="@( !isAuthenticated )">
                        🛒 Add to cart
                    </button>
                </div>
            </div>
        }
    </div>

    @if (!isAuthenticated)
    {
        <p class="text-danger mt-3">
            ⛔ You must <a @onclick="GoLogin">log in</a> before you can order.
        </p>
    }
    else if (cart.Any())
    {
        <hr />
        <h5>Your Cart (@cart.Count):</h5>
        <ul class="list-group mb-2">
            @foreach (var c in cart)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @c.Name
                    <span>
                        <button class="btn btn-sm btn-danger"
                                @onclick="() => RemoveFromCart(c)">
                            ✖
                        </button>
                    </span>
                </li>
            }
        </ul>

        <button class="btn btn-success" @onclick="SubmitOrder" disabled="@isSubmitting">
            @if (isSubmitting)
            {
                <span>⏳ Submitting…</span>
            }
            else
            {
                <span>✅ Submit Order</span>
            }
        </button>

        @if (!string.IsNullOrEmpty(feedback))
        {
            <p class="mt-2">@feedback</p>
        }
    }
}

@code {
    private List<MenuItem> menu = new();
    private List<MenuItem> cart = new();
    private bool isLoading, isInitialized, isAuthenticated, isSubmitting;
    private string feedback = "";

    protected override async Task OnInitializedAsync()
    {
        // 1. Check login status
        isAuthenticated = await AuthService.IsUserAuthenticated();

        // 2. Load menu regardless of auth (optionally you could hide it until login)
        menu = await RoomService.GetMenu();
        isLoading = false;
        isInitialized = true;
    }

    void AddToCart(MenuItem item)
    {
        if (isAuthenticated)
            cart.Add(item);
    }

    void RemoveFromCart(MenuItem item)
    {
        cart.Remove(item);
    }

    void GoLogin() => Nav.NavigateTo("/login");

    async Task SubmitOrder()
    {
        if (!isAuthenticated)
        {
            feedback = "⛔ Please log in first.";
            return;
        }

        isSubmitting = true;
        feedback = "";

        var ids = cart.Select(x => x.Id);
        var ok = await RoomService.PlaceOrder(ids);

        if (ok)
        {
            feedback = "🎉 Your order has been placed!";
            cart.Clear();
        }
        else
        {
            feedback = "❌ Failed to place order.";
        }

        isSubmitting = false;
    }
}
