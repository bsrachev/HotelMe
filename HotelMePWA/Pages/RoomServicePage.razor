@page "/roomservice"
@using HotelMe.Shared.Models
@inject RoomService RoomService
@inject BookingService BookingService
@inject NavigationManager Nav

<h3>🍽️ Room Service Menu</h3>

@if (!isInit)
{
    <p>⏳ Loading…</p>
}
else if (booking == null || booking.Status != "CheckedIn")
{
    <p class="text-danger">
        ⛔ You must have an active room (Checked-In) to order.
    </p>
}
else
{
    <p><em>Room: @booking.RoomNumber</em></p>
    <div class="row">
        @foreach (var item in menu)
        {
            <div class="col-md-4 mb-3">
                <div class="card p-3">
                    <h5>@item.Name</h5>
                    <p>@item.Description</p>
                    <p><strong>Price:</strong> $@item.Price</p>
                    <button class="btn btn-sm btn-primary" @onclick="() => AddToCart(item)">
                        🛒 Add to cart
                    </button>
                </div>
            </div>
        }
    </div>

    @if (cart.Any())
    {
        <hr />
        <h5>Your Cart (@cart.Count):</h5>
        <ul class="list-group mb-2">
            @foreach (var c in cart)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @c.Name
                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveFromCart(c)">✖</button>
                </li>
            }
        </ul>

        <button class="btn btn-success" @onclick="SubmitOrder" disabled="@isSubmitting">
            @(isSubmitting ? "⏳ Submitting…" : "✅ Submit Order")
        </button>

        @if (!string.IsNullOrEmpty(feedback))
        {
            <p class="mt-2">@feedback</p>
        }
    }
}

@code {
    private Booking? booking;
    private List<MenuItem> menu = new();
    private List<MenuItem> cart = new();
    private bool isInit, isSubmitting;
    private string feedback = "";

    protected override async Task OnInitializedAsync()
    {
        // 1) load booking
        booking = await BookingService.GetCurrentBooking();
        // 2) load menu
        menu = await RoomService.GetMenu();
        isInit = true;
    }

    void AddToCart(MenuItem item) => cart.Add(item);
    void RemoveFromCart(MenuItem item) => cart.Remove(item);

    async Task SubmitOrder()
    {
        if (booking == null || booking.Status != "CheckedIn")
        {
            feedback = "⛔ You must be checked in to place an order.";
            return;
        }

        isSubmitting = true;
        feedback = "";

        var ok = await RoomService.PlaceOrder(cart.Select(x => x.Id));
        isSubmitting = false;

        if (ok)
        {
            // On success, navigate to /orders
            Nav.NavigateTo("/orders");
        }
        else
        {
            feedback = "❌ Failed to place order.";
        }
    }
}
