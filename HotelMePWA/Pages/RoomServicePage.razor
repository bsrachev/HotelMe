@page "/roomservice"
@using HotelMe.Shared.Models
@inject RoomService RoomService
@inject BookingService BookingService
@inject NavigationManager Nav

<MudText Typo="Typo.h5" Class="mb-4">🍽️ Room Service Menu</MudText>

@if (!isInit)
{
    <MudProgressCircular Indeterminate="true" Size="Size.Large" />
}
else if (booking == null || booking.Status != "CheckedIn")
{
    <MudAlert Severity="Severity.Error">
        ⛔ You must have an active room (Checked-In) to order.
    </MudAlert>
}
else
{
    <MudText Class="mb-2"><em>Room: @booking.RoomNumber</em></MudText>

    <MudGrid>
        @foreach (var item in menu)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard Class="pa-2 ma-2">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">@item.Name</MudText>
                        <MudText>@item.Description</MudText>
                        <MudText Color="Color.Primary">
                            Price: $@item.Price
                        </MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled"
                                   Size="Size.Small"
                                   OnClick="@(() => AddToCart(item))">
                            🛒 Add to cart
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>

    @if (cart.Any())
    {
        <MudPaper Class="pa-4 mt-4">
            <MudText Typo="Typo.h6">Your Cart (@cart.Count)</MudText>

            <!-- plain HTML list to avoid generic-typing errors -->
            <ul class="mud-list mt-2">
                @foreach (var c in cart)
                {
                    <li class="mud-list-item d-flex align-items-center">
                        <span>@c.Name</span>
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       OnClick="@(() => RemoveFromCart(c))" />
                    </li>
                }
            </ul>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Success"
                       OnClick="SubmitOrder"
                       Disabled="isSubmitting"
                       Class="mt-2">
                @(isSubmitting ? "⏳ Submitting…" : "✅ Submit Order")
            </MudButton>

            @if (!string.IsNullOrEmpty(feedback))
            {
                <MudText Class="mt-2">@feedback</MudText>
            }
        </MudPaper>
    }
}

@code {
    private Booking booking;
    private List<MenuItem> menu = new();
    private List<MenuItem> cart = new();
    private bool isInit, isSubmitting;
    private string feedback = "";

    protected override async Task OnInitializedAsync()
    {
        booking = await BookingService.GetCurrentBooking();
        menu = await RoomService.GetMenu();
        isInit = true;
    }

    void AddToCart(MenuItem item) => cart.Add(item);
    void RemoveFromCart(MenuItem item) => cart.Remove(item);

    async Task SubmitOrder()
    {
        if (booking == null || booking.Status != "CheckedIn")
        {
            feedback = "⛔ You must be checked in to place an order.";
            return;
        }

        isSubmitting = true;
        var ok = await RoomService.PlaceOrder(cart.Select(x => x.Id));
        isSubmitting = false;

        if (ok)
            Nav.NavigateTo("orders");
        else
            feedback = "❌ Failed to place order.";
    }
}
