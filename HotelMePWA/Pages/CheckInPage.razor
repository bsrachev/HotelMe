@page "/checkin"
@inject BookingService BookingService
@inject AuthService AuthService
@inject NavigationManager Nav

<MudText Typo="Typo.h5" Class="mb-2">🏨 Digital Check‑in</MudText>

@if (!isInitialized)
{
    <MudProgressCircular Indeterminate="true" Class="my-4" />
}
else if (!isAuthenticated)
{
    <MudText Color="Color.Error">⛔ You need to <MudLink Href="/login">log in</MudLink> as a guest first.</MudText>
}
else if (booking == null)
{
    <MudText Color="Color.Secondary">No active booking found.</MudText>
}
else
{
    <MudText><b>Room:</b> @booking.RoomNumber</MudText>
    <MudText><b>Check‑in Date:</b> @booking.CheckInDate</MudText>
    <MudText><b>Check‑out Date:</b> @booking.CheckOutDate</MudText>
    <MudText><b>Status:</b> @booking.Status</MudText>

    @if (booking.Status == "Pending")
    {
        <MudButton Color="Color.Success" OnClick="PerformCheckIn">✅ Check‑in</MudButton>
    }
    else if (booking.Status == "CheckedIn")
    {
        <MudButton Color="Color.Error" OnClick="PerformCheckOut">🚪 Check‑out</MudButton>
    }
}

@code {
    private Booking? booking;
    private bool isAuthenticated;
    private bool isInitialized;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticated();

        if (isAuthenticated)
        {
            booking = await BookingService.GetCurrentBooking();
        }

        isInitialized = true;
    }

    private void GoLogin()
    {
        Nav.NavigateTo("/login");
    }

    private async Task PerformCheckIn()
    {
        if (await BookingService.CheckIn())
            booking!.Status = "CheckedIn";
    }

    private async Task PerformCheckOut()
    {
        if (await BookingService.CheckOut())
            booking!.Status = "CheckedOut";
    }
}
