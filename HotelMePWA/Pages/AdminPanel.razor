@page "/admin/users"
@inject HttpClient Http
@inject AuthService AuthService

@if (!isAuthenticated || userRole != "Admin")
{
    <MudText Color="Color.Error">⛔ Трябва да сте влезли като администратор!</MudText>
}
else if (isLoading)
{
    <MudProgressCircular Indeterminate="true" Class="my-4" />
}
else
{
    <MudText Typo="Typo.h5" Class="mb-2">👑 Администраторски панел</MudText>

    @if (users != null && users.Count > 0)
    {
        <MudTable Items="users" Dense="true" Class="mt-3">
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>Потребителско име</MudTh>
                <MudTh>Email</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="#">@context.Id</MudTd>
                <MudTd DataLabel="Потребителско име">@context.UserName</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudText Color="Color.Secondary">Няма налични потребители.</MudText>
    }

    <MudButton Color="Color.Primary" OnClick="LoadUsers" Class="mt-2">🔄 Презареди потребители</MudButton>
}

@code {
    private bool isAuthenticated;
    private string userRole;
    private bool isLoading;
    private List<ApplicationUser> users = new(); // Changed to ApplicationUser

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticated();
        userRole = await AuthService.GetUserRole();
        if (isAuthenticated && userRole == "Admin")
        {
            await LoadUsers();
        }
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        try
        {
            var httpClient = await AuthService.GetAuthorizedHttpClient();
            users = await httpClient.GetFromJsonAsync<List<ApplicationUser>>("api/users/all-users");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Грешка при зареждане на потребители: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    // ApplicationUser model (mirroring the Identity class)
    private class ApplicationUser
    {
        public string Id { get; set; } // In Identity, Id is usually a string
        public string UserName { get; set; } // Username replaces Name
        public string Email { get; set; }
    }
}
