@inject AuthService AuthService
@inject NavigationManager Nav

<MudNavMenu>
    <MudNavLink Href=""
                Icon="@Icons.Material.Filled.Home">
        🏠 Начало
    </MudNavLink>

    @if (isAuthenticated)
    {
        @if (userRole == "Admin")
        {
            <MudNavLink Href="admin/users"
                        Icon="@Icons.Material.Filled.AdminPanelSettings">
                ⚙️ Админ: Потребители
            </MudNavLink>
            <!-- etc… -->
        }
        else
        {
            <MudNavLink Href="chat"
                        Icon="@Icons.Material.Filled.Chat">
                💬 Chat с рецепция
            </MudNavLink>
            <!-- etc… -->
        }

        <MudNavLink OnClick="Logout"
                    Icon="@Icons.Material.Filled.ExitToApp">
            🚪 Изход
        </MudNavLink>
    }
    else
    {
        <MudNavLink Href="login"
                    Icon="@Icons.Material.Filled.Login">
            🔑 Вход
        </MudNavLink>
        <MudNavLink Href="register"
                    Icon="@Icons.Material.Filled.PersonAdd">
            🔐 Регистрация
        </MudNavLink>
    }
</MudNavMenu>

@code {
    private bool isAuthenticated;
    private string userRole = "";

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticated();
        if (isAuthenticated)
            userRole = await AuthService.GetUserRole();

        AuthService.OnAuthStateChanged += UpdateAuthState;
    }

    private async void UpdateAuthState()
    {
        isAuthenticated = await AuthService.IsUserAuthenticated();
        userRole = await AuthService.GetUserRole();
        StateHasChanged();
    }

    private void Logout()
    {
        Nav.NavigateTo("/logout");
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= UpdateAuthState;
    }
}
